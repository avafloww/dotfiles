set showcmd

" use space as leader
let mapleader = " "

nnoremap <silent> <leader>qq :qa<CR>
nnoremap <silent> <leader>wq :wqa<CR>

" Quake mode
nnoremap <silent> <leader>` :FloatermToggle quake<CR>
tnoremap <silent> <esc><esc> <C-\><C-n>
tnoremap <silent> <esc>` <C-\><C-n>:FloatermToggle quake<CR>
" don't whine on exit if the quake terminal is "open", just kill it
" this allows for still warning if attempting to exit with other terminals open
autocmd ExitPre * :FloatermKill quake<CR>

" move to the end of a line and insert
nnoremap <silent> <leader>i $i<right>

" ADHD making me want to save all the time
nnoremap <C-s> :w<CR>
inoremap <C-s> <Esc>:w<CR>i

" lookups
let g:fzf_buffers_jump = 1
nnoremap <silent> <leader>h :History:<CR>
nnoremap <silent> <leader>P :call fzf#vim#files('.', {'source': 'rg --files --hidden --glob "!.git/*" --glob "!.cache/*"'})<CR>
nnoremap <silent> <leader>p :call fzf#vim#files('.', {'source': 'rg --files'})<CR>
nnoremap <silent> <leader><space> :Buffers<CR>
nnoremap <silent> <leader>ft :Rg<CR>

" fern drawer binding
nnoremap <silent> <leader>tt :Fern . -reveal=% -drawer -toggle<CR>

" window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" window movement
map <C-H> <C-w>H
map <C-J> <C-w>J
map <C-K> <C-w>K
map <C-L> <C-w>L

" make fFtT work as my brain expects
nnoremap <Esc> <Plug>(clever-f-reset)
let g:clever_f_fix_key_direction = 1

" Copilot and code completion
let g:copilot_no_tab_map = v:true
nnoremap <silent> <leader><C-tab> <Plug>(copilot-suggest)
nnoremap <silent> <leader><tab> <Plug>(copilot-dismiss)
" on tab, prefer coc completions (if selected), otherwise use
" copilot#Accept() to insert whatever copilot says, otherwise
" just insert a tab keypress (whatever we have that equivalent to)
inoremap <silent><expr> <tab> coc#pum#visible() && coc#pum#info()['index'] != -1 ? coc#pum#confirm() : copilot#Accept("<tab>")

" easy vimrc edit/reloading
nnoremap <silent> <leader>ve :e $MYVIMRC<CR>
nnoremap <silent> <leader>vr :so $MYVIMRC<CR>

" automatically enable paste mode when pasting in terminal
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

" indentation overrides
autocmd FileType make set tabstop=8 shiftwidth=8 softtabstop=0 noexpandtab

" default indentation
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" enable line numbering
set number

" use pywal colours
colorscheme wal

" enable fern icons
let g:fern#renderer = "devicons"

" enable airline with powerline fonts
autocmd VimEnter * AirlineTheme dark
let g:airline_powerline_fonts = 1

" settings for code completion via coc
set encoding=utf-8
set updatetime=200
set signcolumn=yes

" gr - get cross-references
nmap <silent> gr <Plug>(coc-references)

" gt & gy - go to definition and type definition, respectively
nmap <silent> gt <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)

" gi - go to implementation
nmap <silent> gi <Plug>(coc-implementation)

" gh - get help for symbol under cursor
nnoremap <silent> gh :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" apply quickfix
nmap <silent> <leader>. <Plug>(coc-fix-current)

" apply code action
nmap <silent> <leader>, <Plug>(coc-codeaction-cursor)
xmap <silent> <leader>, <Plug>(coc-codeaction-selected)

" format code
nmap <silent> <leader>fs <Plug>(coc-format-selected)
xmap <silent> <leader>fs <Plug>(coc-format-selected)
nmap <silent> <leader>fb <Plug>(coc-format)

